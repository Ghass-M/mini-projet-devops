name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from requirements files if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          # Install testing dependencies
          pip install pytest pytest-cov flask
          
      - name: Run tests
        run: |
          # Run tests with coverage
          pytest -v --cov=. --cov-report=term-missing
          
      - name: Upload coverage reports
        if: success()
        run: |
          echo "Tests passed successfully!"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Set image tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "IMAGE_TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and tag images
        run: |
          # Build with docker compose first
          docker compose build
          
          # Tag images with appropriate tag
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-backend:latest ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-backend:${{ steps.tag.outputs.IMAGE_TAG }}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-frontend:latest ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-frontend:${{ steps.tag.outputs.IMAGE_TAG }}
          
          echo "=== Images after build and tag ==="
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep -E "(REPOSITORY|${{ secrets.DOCKERHUB_USERNAME }})"
          
      - name: Push backend image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-backend:${{ steps.tag.outputs.IMAGE_TAG }}
          
      - name: Push frontend image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-frontend:${{ steps.tag.outputs.IMAGE_TAG }}
          
      - name: Output image tag for next job
        id: output_tag
        run: |
          echo "image_tag=${{ steps.tag.outputs.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  test-kubernetes:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Get image tag from previous job
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "IMAGE_TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Install Kind
        run: |
          # Download and install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
      - name: Create Kind cluster manually
        run: |
          # Create cluster
          kind create cluster --name test-cluster --wait 300s
          
          # Export kubeconfig
          kind export kubeconfig --name test-cluster
          
          # Test connection
          kubectl cluster-info
          kubectl get nodes

      - name: Load Docker images into Kind
        run: |
          # Pull the images we just pushed
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-backend:${{ steps.get_tag.outputs.IMAGE_TAG }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-frontend:${{ steps.get_tag.outputs.IMAGE_TAG }}
          
          # Pull postgres image
          docker pull postgres:14
          
          # Load them into the Kind cluster
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-backend:${{ steps.get_tag.outputs.IMAGE_TAG }} --name test-cluster
          kind load docker-image ${{ secrets.DOCKERHUB_USERNAME }}/flask-react-postgres-frontend:${{ steps.get_tag.outputs.IMAGE_TAG }} --name test-cluster
          kind load docker-image postgres:14 --name test-cluster
          
          echo "=== Images loaded into Kind cluster ==="

      - name: Update Kubernetes manifests with correct image names and tags
        run: |
          # Replace placeholder with actual DockerHub username and tag
          find kubernetes/ -name "*.yaml" -exec sed -i "s|YOUR_DOCKERHUB_USERNAME|${{ secrets.DOCKERHUB_USERNAME }}|g" {} \;
          find kubernetes/ -name "*.yaml" -exec sed -i "s|:latest|:${{ steps.get_tag.outputs.IMAGE_TAG }}|g" {} \;
          echo "Updated manifests:"
          grep -r "image:" kubernetes/ || true

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/
          echo "=== Deployments created ==="
          kubectl get deployments
          echo "=== Services created ==="
          kubectl get services

      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for postgres..."
          kubectl wait --for=condition=Available deployment/postgres --timeout=120s || true
          
          echo "Waiting for backend..."
          kubectl wait --for=condition=Available deployment/backend --timeout=120s || true
          
          echo "Waiting for frontend..."
          kubectl wait --for=condition=Available deployment/frontend --timeout=120s || true

      - name: Check pod status
        run: |
          echo "=== Pod Status ==="
          kubectl get pods -o wide
          
          echo "=== Service Status ==="
          kubectl get services
          
          echo "=== Pod logs (if any failures) ==="
          kubectl get pods --field-selector=status.phase!=Running || true

      - name: Test scalability
        run: |
          echo "=== Testing Backend Scalability ==="
          echo "Current backend replicas:"
          kubectl get deployment backend -o jsonpath='{.status.replicas}' || echo "0"
          
          echo "Scaling backend to 3 replicas..."
          kubectl scale deployment backend --replicas=3
          
          echo "Waiting 30 seconds for scaling..."
          sleep 30
          
          echo "New backend pod count:"
          kubectl get pods -l app=backend | wc -l
          
          echo "=== Backend pods after scaling ==="
          kubectl get pods -l app=backend

      - name: Test rolling update
        run: |
          echo "=== Testing Rolling Update ==="
          echo "Current backend image:"
          kubectl get deployment backend -o jsonpath='{.spec.template.spec.containers[0].image}' || echo "Unknown"
          
          # Force a rolling update by updating an annotation with a simple timestamp
          echo "Triggering rolling update..."
          TIMESTAMP=$(date +%s)
          kubectl patch deployment backend -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"rollout\":\"$TIMESTAMP\"}}}}}"
          
          echo "Waiting for rolling update to complete..."
          kubectl rollout status deployment/backend --timeout=60s
          
          echo "=== Backend pods after rolling update ==="
          kubectl get pods -l app=backend

      - name: Final status check
        run: |
          echo "=== Final Cluster Status ==="
          kubectl get all
          
      - name: Show pod logs for debugging
        if: failure()
        run: |
          echo "=== Showing pod logs for debugging ==="
          for pod in $(kubectl get pods -o name); do
            echo "=== Logs for $pod ==="
            kubectl logs $pod --tail=20 || echo "No logs available"
          done

      - name: Cleanup
        run: |
          echo "Cleaning up Kind cluster..."
          kind delete cluster --name test-cluster
        if: always()